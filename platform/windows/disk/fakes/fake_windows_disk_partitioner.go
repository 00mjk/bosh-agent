// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/platform/windows/disk"
)

type FakeWindowsDiskPartitioner struct {
	GetCountOnDiskStub        func(diskNumber string) (string, error)
	getCountOnDiskMutex       sync.RWMutex
	getCountOnDiskArgsForCall []struct {
		diskNumber string
	}
	getCountOnDiskReturns struct {
		result1 string
		result2 error
	}
	getCountOnDiskReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWindowsDiskPartitioner) GetCountOnDisk(diskNumber string) (string, error) {
	fake.getCountOnDiskMutex.Lock()
	ret, specificReturn := fake.getCountOnDiskReturnsOnCall[len(fake.getCountOnDiskArgsForCall)]
	fake.getCountOnDiskArgsForCall = append(fake.getCountOnDiskArgsForCall, struct {
		diskNumber string
	}{diskNumber})
	fake.recordInvocation("GetCountOnDisk", []interface{}{diskNumber})
	fake.getCountOnDiskMutex.Unlock()
	if fake.GetCountOnDiskStub != nil {
		return fake.GetCountOnDiskStub(diskNumber)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getCountOnDiskReturns.result1, fake.getCountOnDiskReturns.result2
}

func (fake *FakeWindowsDiskPartitioner) GetCountOnDiskCallCount() int {
	fake.getCountOnDiskMutex.RLock()
	defer fake.getCountOnDiskMutex.RUnlock()
	return len(fake.getCountOnDiskArgsForCall)
}

func (fake *FakeWindowsDiskPartitioner) GetCountOnDiskArgsForCall(i int) string {
	fake.getCountOnDiskMutex.RLock()
	defer fake.getCountOnDiskMutex.RUnlock()
	return fake.getCountOnDiskArgsForCall[i].diskNumber
}

func (fake *FakeWindowsDiskPartitioner) GetCountOnDiskReturns(result1 string, result2 error) {
	fake.GetCountOnDiskStub = nil
	fake.getCountOnDiskReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWindowsDiskPartitioner) GetCountOnDiskReturnsOnCall(i int, result1 string, result2 error) {
	fake.GetCountOnDiskStub = nil
	if fake.getCountOnDiskReturnsOnCall == nil {
		fake.getCountOnDiskReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCountOnDiskReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWindowsDiskPartitioner) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCountOnDiskMutex.RLock()
	defer fake.getCountOnDiskMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWindowsDiskPartitioner) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ disk.WindowsDiskPartitioner = new(FakeWindowsDiskPartitioner)
