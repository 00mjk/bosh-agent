// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/platform"
)

type FakeWindowsDiskLinker struct {
	LinkTargetStub        func(location string) (target string, err error)
	linkTargetMutex       sync.RWMutex
	linkTargetArgsForCall []struct {
		location string
	}
	linkTargetReturns struct {
		result1 string
		result2 error
	}
	linkTargetReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeWindowsDiskLinker) LinkTarget(location string) (target string, err error) {
	fake.linkTargetMutex.Lock()
	ret, specificReturn := fake.linkTargetReturnsOnCall[len(fake.linkTargetArgsForCall)]
	fake.linkTargetArgsForCall = append(fake.linkTargetArgsForCall, struct {
		location string
	}{location})
	fake.recordInvocation("LinkTarget", []interface{}{location})
	fake.linkTargetMutex.Unlock()
	if fake.LinkTargetStub != nil {
		return fake.LinkTargetStub(location)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.linkTargetReturns.result1, fake.linkTargetReturns.result2
}

func (fake *FakeWindowsDiskLinker) LinkTargetCallCount() int {
	fake.linkTargetMutex.RLock()
	defer fake.linkTargetMutex.RUnlock()
	return len(fake.linkTargetArgsForCall)
}

func (fake *FakeWindowsDiskLinker) LinkTargetArgsForCall(i int) string {
	fake.linkTargetMutex.RLock()
	defer fake.linkTargetMutex.RUnlock()
	return fake.linkTargetArgsForCall[i].location
}

func (fake *FakeWindowsDiskLinker) LinkTargetReturns(result1 string, result2 error) {
	fake.LinkTargetStub = nil
	fake.linkTargetReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWindowsDiskLinker) LinkTargetReturnsOnCall(i int, result1 string, result2 error) {
	fake.LinkTargetStub = nil
	if fake.linkTargetReturnsOnCall == nil {
		fake.linkTargetReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.linkTargetReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeWindowsDiskLinker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.linkTargetMutex.RLock()
	defer fake.linkTargetMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeWindowsDiskLinker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ platform.WindowsDiskLinker = new(FakeWindowsDiskLinker)
