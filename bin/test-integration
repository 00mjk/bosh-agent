#!/usr/bin/env bash

set -e -x

bin=$(dirname $0)

base=$( cd ${bin}/.. && pwd )
if [ ! -d $base/tmp ]; then
  mkdir -p $base/tmp
fi

cleanup() {
	echo "Cleaning up"

  (cd $base && vagrant destroy -f)

  if [ ! -z "$OLD_BOSH_LITE_PRIVATE_KEY" ]; then
    export BOSH_LITE_PRIVATE_KEY=$OLD_BOSH_LITE_PRIVATE_KEY
  fi

  if [ -f "$tmpfile" ]; then
    rm -rf $tmpfile
  fi
}

trap cleanup EXIT

# Vagrant needs ubuntu to own the private key if aws provider
if [ ! -z "$BOSH_LITE_PRIVATE_KEY" ]; then
  tmpfile=`mktemp -t bosh-agent-tests-XXXXXXXX`
  cat $BOSH_LITE_PRIVATE_KEY > $tmpfile
  export OLD_BOSH_LITE_PRIVATE_KEY=$BOSH_LITE_PRIVATE_KEY
  export BOSH_LITE_PRIVATE_KEY=$tmpfile
fi

cd $base
echo -e "\n Running agent integration tests..."
$bin/env go clean -r github.com/cloudfoundry/bosh-agent/
vagrant up $@

vagrant ssh-config > $base/tmp/vagrant-config

echo -e "\n Installing ginkgo..."
$bin/go install github.com/onsi/ginkgo/ginkgo

echo -e "\n Running tests..."
$bin/env ginkgo -race -trace integration

# check that agent unmounted disk
result=`vagrant ssh -c "sudo mount | grep -c /dev/loop2" | head -c 1`
COUNTER=0

while [ "$result" != "0" ];
do
  if [ "$COUNTER" -gt 5 ]; then
  	echo "FAILURE: Drive not unmounted after five seconds"
  	exit 1
  fi
  COUNTER=$((COUNTER+1))
  sleep 1
  result=`vagrant ssh -c "sudo mount | grep -c /dev/loop2" | head -c 1`
done

echo "SUCCESS: Drive unmounted"

exit 0