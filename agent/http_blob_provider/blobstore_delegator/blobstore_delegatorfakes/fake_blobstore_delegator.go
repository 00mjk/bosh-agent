// Code generated by counterfeiter. DO NOT EDIT.
package blobstore_delegatorfakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-agent/agent/http_blob_provider/blobstore_delegator"
	"github.com/cloudfoundry/bosh-utils/crypto"
)

type FakeBlobstoreDelegator struct {
	GetStub        func(crypto.MultipleDigest, string, string) (string, error)
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 crypto.MultipleDigest
		arg2 string
		arg3 string
	}
	getReturns struct {
		result1 string
		result2 error
	}
	getReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	WriteStub        func(string, string) (string, crypto.MultipleDigest, error)
	writeMutex       sync.RWMutex
	writeArgsForCall []struct {
		arg1 string
		arg2 string
	}
	writeReturns struct {
		result1 string
		result2 crypto.MultipleDigest
		result3 error
	}
	writeReturnsOnCall map[int]struct {
		result1 string
		result2 crypto.MultipleDigest
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeBlobstoreDelegator) Get(arg1 crypto.MultipleDigest, arg2 string, arg3 string) (string, error) {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 crypto.MultipleDigest
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3})
	fake.getMutex.Unlock()
	if fake.GetStub != nil {
		return fake.GetStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeBlobstoreDelegator) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeBlobstoreDelegator) GetCalls(stub func(crypto.MultipleDigest, string, string) (string, error)) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeBlobstoreDelegator) GetArgsForCall(i int) (crypto.MultipleDigest, string, string) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeBlobstoreDelegator) GetReturns(result1 string, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobstoreDelegator) GetReturnsOnCall(i int, result1 string, result2 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeBlobstoreDelegator) Write(arg1 string, arg2 string) (string, crypto.MultipleDigest, error) {
	fake.writeMutex.Lock()
	ret, specificReturn := fake.writeReturnsOnCall[len(fake.writeArgsForCall)]
	fake.writeArgsForCall = append(fake.writeArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("Write", []interface{}{arg1, arg2})
	fake.writeMutex.Unlock()
	if fake.WriteStub != nil {
		return fake.WriteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.writeReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeBlobstoreDelegator) WriteCallCount() int {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	return len(fake.writeArgsForCall)
}

func (fake *FakeBlobstoreDelegator) WriteCalls(stub func(string, string) (string, crypto.MultipleDigest, error)) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = stub
}

func (fake *FakeBlobstoreDelegator) WriteArgsForCall(i int) (string, string) {
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	argsForCall := fake.writeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeBlobstoreDelegator) WriteReturns(result1 string, result2 crypto.MultipleDigest, result3 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	fake.writeReturns = struct {
		result1 string
		result2 crypto.MultipleDigest
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlobstoreDelegator) WriteReturnsOnCall(i int, result1 string, result2 crypto.MultipleDigest, result3 error) {
	fake.writeMutex.Lock()
	defer fake.writeMutex.Unlock()
	fake.WriteStub = nil
	if fake.writeReturnsOnCall == nil {
		fake.writeReturnsOnCall = make(map[int]struct {
			result1 string
			result2 crypto.MultipleDigest
			result3 error
		})
	}
	fake.writeReturnsOnCall[i] = struct {
		result1 string
		result2 crypto.MultipleDigest
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeBlobstoreDelegator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.writeMutex.RLock()
	defer fake.writeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeBlobstoreDelegator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ blobstore_delegator.BlobstoreDelegator = new(FakeBlobstoreDelegator)
